{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"p",
				"pscene_"
			],
			[
				"model",
				"model_name"
			],
			[
				"mesh",
				"mesh_node"
			],
			[
				"Sound",
				"SoundDescriptor"
			],
			[
				"chann",
				"channel_group_fx"
			],
			[
				"db",
				"db_to_linear"
			],
			[
				"cam",
				"campos"
			],
			[
				"upd",
				"update_filter"
			],
			[
				"Soun",
				"SoundType"
			],
			[
				"fad",
				"fadeout_accum"
			],
			[
				"volum",
				"volume_dB"
			],
			[
				"desc",
				"descriptor"
			],
			[
				"inter",
				"internstr"
			],
			[
				"to",
				"to_fmod_vec"
			],
			[
				"FMO",
				"FMOD_VECTOR"
			],
			[
				"fmod",
				"fmodsys"
			],
			[
				"buffer",
				"buffer_token"
			],
			[
				"game",
				"game_object_factory_"
			],
			[
				"compo",
				"component_factories_"
			],
			[
				"nor",
				"normalize"
			],
			[
				"get",
				"get_euler_angles"
			],
			[
				"camera",
				"camera_modes_"
			],
			[
				"file",
				"file_path"
			],
			[
				"light",
				"light_index"
			],
			[
				"remove",
				"remove_walls"
			],
			[
				"pm",
				"pmdl"
			],
			[
				"Height",
				"HeightMap"
			],
			[
				"material",
				"material_factory"
			],
			[
				"cell",
				"cells_"
			],
			[
				"cur",
				"cur_x_"
			],
			[
				"is_",
				"is_visited"
			],
			[
				"cur_",
				"cur_x_"
			],
			[
				"zz",
				"zz_start"
			],
			[
				"uin",
				"uint32_t"
			],
			[
				"Vol",
				"VolumeB"
			],
			[
				"Frust",
				"FrustumBox"
			],
			[
				"quer",
				"query_range"
			],
			[
				"Bounding",
				"BoundingRegion"
			],
			[
				"cons",
				"const_iterator"
			],
			[
				"group",
				"group_id"
			],
			[
				"B",
				"BoundingRegion"
			],
			[
				"pri",
				"primitive"
			],
			[
				"pr",
				"primitive"
			],
			[
				"new",
				"new_root"
			],
			[
				"bes",
				"best_fit_octant"
			],
			[
				"mi",
				"mid_point"
			],
			[
				"get_",
				"get_bounding_region"
			],
			[
				"tra",
				"traverse_leaves"
			],
			[
				"parent",
				"parent_"
			],
			[
				"is",
				"is_root_node"
			],
			[
				"dep",
				"depth_"
			],
			[
				"sub",
				"sub_remove"
			],
			[
				"has",
				"has_to_move"
			],
			[
				"interse",
				"intersects"
			],
			[
				"prop",
				"proper_scale_"
			],
			[
				"child",
				"children_"
			],
			[
				"boun",
				"bounding_region_"
			],
			[
				"con",
				"content_"
			],
			[
				"bou",
				"bounding_region_"
			],
			[
				"hash",
				"hash_t"
			],
			[
				"int",
				"intern_strings_"
			],
			[
				"in",
				"inertia"
			],
			[
				"vel",
				"velocity"
			],
			[
				"I",
				"ImVec4"
			],
			[
				"extent",
				"extent_t"
			],
			[
				"draw",
				"draw_requests_"
			],
			[
				"wor",
				"world_end"
			],
			[
				"win",
				"win_height"
			],
			[
				"last",
				"last_x"
			],
			[
				"mouse_",
				"mouse_lock_"
			],
			[
				"last_m",
				"last_mouse_locked"
			],
			[
				"mouse",
				"mouse_out"
			],
			[
				"tex",
				"texCoord"
			],
			[
				"su",
				"sum_even"
			],
			[
				"SSAO",
				"SSAO_renderer_"
			],
			[
				"geom",
				"geometry_shader"
			],
			[
				"name",
				"namespace"
			],
			[
				"Mater",
				"MaterialFactory"
			],
			[
				"fil",
				"file_path"
			],
			[
				"ide",
				"idle_time_fifo"
			],
			[
				"update",
				"update_time_fifo"
			],
			[
				"ifnd",
				"ifndef"
			],
			[
				"C",
				"CANONICAL"
			],
			[
				"Log",
				"LogMode"
			],
			[
				"ha",
				"hashstr_t"
			],
			[
				"ver",
				"verbosity_"
			],
			[
				"ma",
				"material"
			],
			[
				"mate",
				"material_"
			],
			[
				"normal",
				"normal_cmp"
			],
			[
				"Te",
				"TextureUnit"
			],
			[
				"Texture",
				"TextureSampler"
			],
			[
				"Tex",
				"TextureSampler"
			],
			[
				"xml",
				"xml_parser"
			],
			[
				"xml_",
				"xml_parser_"
			],
			[
				"out",
				"out_color"
			],
			[
				"frag",
				"fragment_shader"
			],
			[
				"ge",
				"geometry_shader"
			],
			[
				"vert",
				"vertex_shader"
			],
			[
				"out_",
				"out_bright_color"
			],
			[
				"forw",
				"forward"
			],
			[
				"add",
				"add_definitions\tcommand"
			],
			[
				"inp",
				"input_handler"
			],
			[
				"sc",
				"scene_loader"
			],
			[
				"uni",
				"uniform_locations_"
			],
			[
				"rend",
				"render_editor_GUI_"
			],
			[
				"deb",
				"debug_overlay_renderer_"
			],
			[
				"shadow",
				"shadow_enabled_"
			],
			[
				"parse",
				"parse_xml"
			],
			[
				"n",
				"namespace"
			],
			[
				"Terrain",
				"TerrainChunk"
			],
			[
				"chunk",
				"chunk_index"
			],
			[
				"dirlight",
				"dirlight_model_inv"
			],
			[
				"next",
				"next_frame_required"
			],
			[
				"cout",
				"cout\tcout"
			],
			[
				"set",
				"set_me"
			],
			[
				"ambi",
				"ambient_node"
			],
			[
				"first",
				"first_node"
			],
			[
				"Triangle",
				"TriangleRange"
			],
			[
				"buil",
				"build_normals"
			],
			[
				"crawler",
				"crawler_"
			],
			[
				"Inde",
				"IndexRange"
			],
			[
				"traverse",
				"traverse_triangle_class"
			],
			[
				"triangl",
				"triangle_classes_"
			],
			[
				"trave",
				"traverse_equal_range"
			],
			[
				"ch",
				"chunk_entry"
			],
			[
				"build",
				"build_normals_and_tangents"
			],
			[
				"Vertex3",
				"Vertex3P3N3T2U"
			],
			[
				"x",
				"xmin"
			]
		]
	},
	"buffers":
	[
		{
			"file": "hosts/internstr/source/src/main.cpp",
			"settings":
			{
				"buffer_size": 5761,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*#include <iostream>\n#include <ostream>\n#include <functional>\n#include \"math3d.h\"\n#include \"quaternion.h\"\n#include \"gnuplot-iostream.h\"\n#include \"logger.h\"\n\nusing namespace wcore;\nusing namespace math;\n\n\nstruct RigidBodyState\n{\n    math::vec3 position;         // Center of gravity position\n    math::vec3 velocity;         // C.o.G instant velocity\n    math::vec3 angular_velocity; // Spin vector\n    math::quat orientation;      // Orientation quaternion\n    math::mat3 inertia;          // Inertia matrix\n    float mass = 1.f;            // Total object mass\n\n    friend std::ostream& operator<<(std::ostream& stream, const RigidBodyState& state)\n    {\n        stream << \"p: \" << state.position << \" v: \" << state.velocity;\n        return stream;\n    }\n};\n\ntypedef std::function<math::vec3 (const math::vec3&, const math::vec3&, float, float)> force_t;\n\nstatic force_t gravity = [](const math::vec3& pos, const math::vec3& vel, float m, float t)\n{\n    return m*math::vec3(0.f, -9.81f, 0.f);\n};\nstatic force_t drag = [](const math::vec3& pos, const math::vec3& vel, float m, float t)\n{\n    return -5.0f*vel.norm2()*vel.normalized();\n};\nstatic force_t total_force = [](const math::vec3& pos, const math::vec3& vel, float m, float t)\n{\n    return gravity(pos,vel,m,t) + drag(pos,vel,m,t);\n};\n\nstatic math::mat3 skew_matrix(const math::vec3& a)\n{\n    return math::mat3(0,   -a[2],  a[1],\n                      a[2], 0,    -a[0],\n                     -a[1], a[0],  0);\n}\n\nvec3 newton_raphson_33(const math::mat3& jacobian, const math::vec3& f)\n{\n    math::mat3 J_inv;\n    math::inverse(jacobian, J_inv);\n    return J_inv*f;\n}\n\n// Runge-Kutta-Nystr√∂m integrator\nRigidBodyState integrate_RKN4(const RigidBodyState& last, force_t force, float t, float dt)\n{\n    float mass_inv = 1.0f/last.mass;\n    math::vec3 k1 = mass_inv * force(last.position, last.velocity, last.mass, t);\n    math::vec3 k2 = mass_inv * force(last.position + 0.5f*dt * last.velocity + 0.125f*dt*dt * k1,\n                                     last.velocity + 0.5f*dt * k1, last.mass, t + 0.5f*dt);\n    math::vec3 k3 = mass_inv * force(last.position + 0.5f*dt * last.velocity + 0.125f*dt*dt * k2,\n                                     last.velocity + 0.5f*dt * k2, last.mass, t + 0.5f*dt);\n    math::vec3 k4 = mass_inv * force(last.position +      dt * last.velocity +   0.5f*dt*dt * k3,\n                                     last.velocity +      dt * k3, last.mass, t +      dt);\n    RigidBodyState next;\n    next.position = last.position + dt*last.velocity + dt*dt/6.0f * (k1+k2+k3);\n    next.velocity = last.velocity + dt/6.0f * (k1 + 2.0f*k2 + 2.0f*k3 + k4);\n    next.mass     = last.mass;\n    return next;\n}\n\nRigidBodyState integrate_semi_implicit_euler(const RigidBodyState& last, force_t force, float t, float dt)\n{\n    RigidBodyState next;\n    // * Integrate C.o.G velocity/position\n    next.velocity = last.velocity + dt/last.mass * force(last.position, last.velocity, last.mass, t);\n    next.position = last.position + dt * next.velocity;\n    next.mass     = last.mass;\n\n    // * Integrate orientation\n    // Convert to local coordinates (inertia constant in local frame)\n    math::vec3 omega_b = last.orientation.rotate_inverse(last.angular_velocity);\n    // std::cout << \"omega_b \" << omega_b << std::endl;\n    // Compute residual vector (gyroscopic torque)\n    math::vec3 f = dt * math::cross(omega_b, last.inertia * omega_b);\n    // std::cout << \"f \" << f << std::endl;\n    // Compute Jacobian for Newton-Raphson step\n    math::mat3 J = last.inertia + dt * (skew_matrix(omega_b)*last.inertia - skew_matrix(last.inertia*omega_b));\n    // std::cout << \"J \" << J << std::endl;\n    // Single Newton-Raphson step\n    omega_b -= newton_raphson_33(J, f);\n    // std::cout << \"omega_b \" << omega_b << std::endl;\n    // Get back to world coordinates\n    next.angular_velocity = last.orientation.rotate(omega_b);\n    // std::cout << \"omega \" << next.angular_velocity << std::endl;\n    // Update quaternion\n    next.orientation = last.orientation + 0.5f*dt * math::quat(math::vec4(omega_b));\n    next.orientation.normalize();\n    // std::cout << \"q1 \" << next.orientation << std::endl;\n    next.inertia = last.inertia;\n    return next;\n}\n\nint main()\n{\n    RigidBodyState body1;\n    body1.position = vec3(0,10,0);\n    body1.velocity = vec3(2,10,0);\n    body1.angular_velocity = vec3(-0.5,1,10);\n    body1.mass = 10.f;\n    body1.inertia = mat3(0.1, 0.5,  0,\n                         0.5, 0.1,  0.2,\n                         0,   0.2, 0);\n\n    std::vector<std::tuple<float, float, float, float>> plot_points;\n\n    float t  = 0.f;\n    float dt = 1.0f/60.0f;\n    for(int ii=0; ii<60; ++ii)\n    {\n        // BANG();\n        float x = body1.position.x();\n        float y = body1.position.y();\n\n        //body1 = integrate_RKN4(body1, total_force, t, dt);\n        body1 = integrate_semi_implicit_euler(body1, total_force, t, dt);\n        //std::cout << body1 << std::endl;\n        math::vec3 L(body1.inertia * body1.angular_velocity);\n        std::cout << L << std::endl;\n        t += dt;\n\n        float dx = body1.position.x()-x;\n        float dy = body1.position.y()-y;\n        plot_points.push_back(std::make_tuple(x,y,dx,dy));\n    }\n\n    // Plot\n    Gnuplot gp;\n\n    // Don't forget to put \"\\n\" at the end of each line!\n    gp << \"set xrange [0:1.2]\\nset yrange [0:12]\\n\";\n    // '-' means read from stdin.  The send1d() function sends data to gnuplot's stdin.\n    gp << \"plot '-' with vectors title 'traj'\\n\";\n    gp.send1d(plot_points);\n\n    return 0;\n}\n*/\n\n#include <iostream>\n#include <list>\n#include <bitset>\n\n#include \"octree.hpp\"\n#include \"math3d.h\"\n#include \"camera.h\"\n\nusing namespace wcore;\n\nstruct UData\n{\n    float value;\n    int key;\n\n    bool operator==(const UData& other)\n    {\n        return key == other.key;\n    }\n    friend std::ostream& operator<<(std::ostream& stream, const UData& data);\n};\n\nstd::ostream& operator<<(std::ostream& stream, const UData& data)\n{\n    stream << data.value;\n    return stream;\n}\n/*\nint main()\n{\n    typedef Octree<math::vec3,UData> PointOctree;\n    typedef PointOctree::DataT       DataT;\n    typedef PointOctree::ContentT    DataList;\n\n    BoundingRegion start_region({-100,0,0,50,0,100});\n    BoundingRegion world_region({-100,100,0,100,-100,100});\n    DataList data_points;\n    DataList remove_list;\n\n    math::srand_vec3(42);\n    for(int ii=0; ii<10000; ++ii)\n    {\n        math::vec3 point(math::random_vec3(world_region.extent));\n        UData user_data({point.norm(), ii});\n        DataT obj(point,user_data,ii/1000);\n        data_points.push_back(obj);\n        if(ii<100)\n        {\n            // The 100 first objects will be removed\n            remove_list.push_back(obj);\n        }\n    }\n\n    // Populate octree\n    PointOctree octree(start_region, data_points);\n    octree.propagate();\n\n    // Remove some of the points\n    for(auto&& rem: remove_list)\n    {\n        if(!octree.remove(rem.data))\n            std::cout << \"Couldn't remove\" << std::endl;\n    }\n    octree.remove_group(1); // remove objects from 1000 to 1999\n\n\n    // Insert out of bounds point, octree will grow\n    //octree.insert(DataT(math::vec3(-120,10,40),UData({0,9900})));\n    //octree.propagate();\n\n    uint32_t npoints=0;\n    octree.traverse_leaves([&](auto&& obj)\n    {\n        ++npoints;\n        //std::cout << \"\\t\" << obj.primitive << \" data: \" << obj.data << std::endl;\n    });\n\n    std::cout << \"traverse_leaves(): Recovered \" << npoints << \" points.\" << std::endl;\n\n    npoints=0;\n    octree.traverse_range(BoundingRegion({-28,0,0,20,0,50}),\n    [&](auto&& obj)\n    {\n        ++npoints;\n        //std::cout << \"\\t\" << obj.primitive << \" data: \" << obj.data << std::endl;\n    });\n\n    std::cout << \"traverse_range(BR): Recovered \" << npoints << \" points.\" << std::endl;\n\n    npoints=0;\n    octree.traverse_range(Sphere(math::vec3(-20,10,50),10),\n    [&](auto&& obj)\n    {\n        ++npoints;\n        //std::cout << \"\\t\" << obj.primitive << \" data: \" << obj.data << std::endl;\n    });\n\n    std::cout << \"traverse_range(Sphere): Recovered \" << npoints << \" points.\" << std::endl;\n\n    Camera camera(1024,768);\n    camera.update(1/60.0f);\n\n    npoints=0;\n    octree.traverse_range(camera.get_frustum_box(),\n    [&](auto&& obj)\n    {\n        ++npoints;\n        //std::cout << \"\\t\" << obj.primitive << \" data: \" << obj.data << std::endl;\n    });\n\n    std::cout << \"traverse_range(FB): Recovered \" << npoints << \" points.\" << std::endl;\n\n    npoints=0;\n    octree.traverse_bounds_range(camera.get_frustum_box(),\n    [&](auto&& obj)\n    {\n        ++npoints;\n        //std::cout << \"\\t\" << obj.primitive << \" data: \" << obj.data << std::endl;\n    });\n\n    std::cout << \"traverse_bounds_range(FB): Traversed \" << npoints << \" bounds.\" << std::endl;\n\n    return 0;\n}\n*/\n\n/*\nstruct Circle {};\nstruct Dick {};\nstruct Bollock {};\n\ntemplate<typename T, typename U>\nstruct collides_static\n{\n    static bool intersects(const T&, const U&);\n};\n\ntemplate<>\nstruct collides_static<Dick,Circle>\n{\n    static bool intersects(const Dick&, const Circle&) { return true; }\n};\ntemplate<>\nstruct collides_static<Dick,Bollock>\n{\n    static bool intersects(const Dick&, const Bollock&) { return true; }\n};\ntemplate<>\nstruct collides_static<Dick,Dick>\n{\n    static bool intersects(const Dick&, const Dick&) { return false; }\n};\n\n\ntemplate<typename T, typename U>\nstruct collides\n{\n    // For CTAD\n    collides(const T& t, const U& u):\n    t_(t),\n    u_(u)\n    {}\n\n    bool intersects();\n\nprivate:\n    const T& t_;\n    const U& u_;\n};\n\ntemplate<>\nbool collides<Dick,Circle>::intersects()\n{\n    return true;\n}\ntemplate<>\nbool collides<Dick,Bollock>::intersects()\n{\n    return true;\n}\ntemplate<>\nbool collides<Dick,Dick>::intersects()\n{\n    return false;\n}\n\n#include <chrono>\n\nint main()\n{\n\n    Dick dick1;\n    Dick dick2;\n    Bollock bollock;\n    Circle circle;\n\n    std::cout << collides_static<Dick,Dick>::intersects(dick1,dick2) << std::endl;\n    std::cout << collides_static<Dick,Bollock>::intersects(dick1,bollock) << std::endl;\n    std::cout << collides_static<Dick,Circle>::intersects(dick1,circle) << std::endl;\n\n    std::cout << collides(dick1,dick2).intersects() << std::endl;\n    std::cout << collides(dick1,bollock).intersects() << std::endl;\n    std::cout << collides(dick2,circle).intersects() << std::endl;\n\n    return 0;\n}\n*/\n\n#include <memory>\n\nclass AA\n{\npublic:\n    virtual ~AA() { std::cout << \"AA dtor\" << std::endl; }\n    virtual void print() = 0;\n};\n\nclass BB: public AA\n{\npublic:\n    virtual ~BB() { std::cout << \"BB dtor\" << std::endl; }\n    virtual void print() { std::cout << \"BB\" << std::endl; }\n};\n\nclass CC: public AA\n{\npublic:\n    virtual ~CC() { std::cout << \"CC dtor\" << std::endl; }\n    virtual void print() { std::cout << \"CC\" << std::endl; }\n};\n\nint main()\n{\n    /*std::shared_ptr<AA> bb1(new BB());\n    bb1->print();\n\n    std::shared_ptr<AA> cc1(new CC());\n    cc1->print();*/\n\n    std::shared_ptr<AA> bb2_as_aa;\n    {\n        std::shared_ptr<BB> bb2(new BB());\n        bb2_as_aa = static_cast<std::shared_ptr<AA>>(bb2);\n    }\n    bb2_as_aa->print();\n\n    return 0;\n}\n",
			"file": "hosts/nuclear/source/src/main.cpp",
			"file_size": 10345,
			"file_write_time": 131936721764983683,
			"settings":
			{
				"buffer_size": 11076,
				"line_ending": "Unix"
			}
		},
		{
			"file": "hosts/maze/source/src/main.cpp",
			"settings":
			{
				"buffer_size": 12781,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/wcore.h",
			"settings":
			{
				"buffer_size": 1580,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/wcore.cpp",
			"settings":
			{
				"buffer_size": 9448,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/scene.h",
			"settings":
			{
				"buffer_size": 8675,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/scene.cpp",
			"settings":
			{
				"buffer_size": 15867,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/mesh.hpp",
			"settings":
			{
				"buffer_size": 6216,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/scene_loader.h",
			"settings":
			{
				"buffer_size": 5902,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/scene_loader.cpp",
			"settings":
			{
				"buffer_size": 39102,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/game_object_factory.h",
			"settings":
			{
				"buffer_size": 2102,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/game_object_factory.cpp",
			"settings":
			{
				"buffer_size": 1045,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/entity_factory.h",
			"settings":
			{
				"buffer_size": 1113,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/entity_factory.cpp",
			"settings":
			{
				"buffer_size": 3252,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/model_factory.h",
			"settings":
			{
				"buffer_size": 2006,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/model_factory.cpp",
			"settings":
			{
				"buffer_size": 5569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/include/surface_mesh_factory.h",
			"settings":
			{
				"buffer_size": 2051,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/src/surface_mesh_factory.cpp",
			"settings":
			{
				"buffer_size": 8152,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "config/keybindings.xml",
			"settings":
			{
				"buffer_size": 4984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/l_mv.xml",
			"settings":
			{
				"buffer_size": 5529,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/l_maze.xml",
			"settings":
			{
				"buffer_size": 6236,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/l_tree.xml",
			"settings":
			{
				"buffer_size": 16849,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/l_crystal.xml",
			"settings":
			{
				"buffer_size": 23569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "config/config.xml",
			"settings":
			{
				"buffer_size": 3308,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/assets.xml",
			"settings":
			{
				"buffer_size": 8439,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/sounds.xml",
			"settings":
			{
				"buffer_size": 771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/entity.xml",
			"settings":
			{
				"buffer_size": 243,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/gpass.frag",
			"settings":
			{
				"buffer_size": 2727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/levels/gui_assets.xml",
			"settings":
			{
				"buffer_size": 233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/cursor.vert",
			"settings":
			{
				"buffer_size": 256,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/lpass_exp.vert",
			"settings":
			{
				"buffer_size": 866,
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/lpass_exp.frag",
			"settings":
			{
				"buffer_size": 6398,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/tests/catch_mat.cpp",
			"settings":
			{
				"buffer_size": 14274,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/cursor.frag",
			"settings":
			{
				"buffer_size": 258,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/text.vert",
			"settings":
			{
				"buffer_size": 258,
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/line.vert",
			"settings":
			{
				"buffer_size": 225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/line.frag",
			"settings":
			{
				"buffer_size": 227,
				"line_ending": "Unix"
			}
		},
		{
			"file": "res/shaders/text.frag",
			"settings":
			{
				"buffer_size": 243,
				"line_ending": "Unix"
			}
		},
		{
			"file": "NOTES.md",
			"settings":
			{
				"buffer_size": 392628,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "hosts/maze/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "hosts/sandbox/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1380,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 230,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 5107,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3022,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"pa",
				"Package Control: Remove Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/ndx/Desktop/WCore/source/include/chunk.h",
		"/home/ndx/Desktop/WCore/source/src/chunk.cpp",
		"/home/ndx/Desktop/WCore/source/src/material_factory.cpp",
		"/home/ndx/Desktop/WCore/source/src/obj_loader.cpp",
		"/home/ndx/Desktop/WCore/source/src/geometry_renderer.cpp",
		"/home/ndx/Desktop/WCore/source/include/mesh.hpp",
		"/home/ndx/Desktop/WCore/source/src/gui_renderer.cpp",
		"/home/ndx/Desktop/WCore/source/include/gui_renderer.h",
		"/home/ndx/Desktop/WCore/source/src/model.cpp",
		"/home/ndx/Desktop/WCore/source/include/tree_generator.h",
		"/home/ndx/Desktop/WCore/source/src/mesh_factory.cpp",
		"/home/ndx/Desktop/WCore/source/include/mesh_factory.h",
		"/home/ndx/Desktop/WCore/source/include/model.h",
		"/home/ndx/Desktop/WCore/source/src/pipeline.cpp",
		"/home/ndx/Desktop/WCore/source/src/context.cpp",
		"/home/ndx/Desktop/WCore/source/src/engine_core.cpp",
		"/home/ndx/Desktop/WCore/source/src/tree_generator.cpp",
		"/home/ndx/Desktop/WCore/source/src/rock_generator.cpp",
		"/home/ndx/Desktop/WCore/source/include/surface_mesh.h",
		"/home/ndx/Desktop/WCore/source/src/terrain_patch.cpp",
		"/home/ndx/Desktop/WCore/source/include/terrain_patch.h",
		"/home/ndx/Desktop/WCore/source/include/rock_generator.h",
		"/home/ndx/Desktop/WCore/source/include/obj_loader.h",
		"/home/ndx/Desktop/WCore/source/src/sound_system.cpp",
		"/home/ndx/Desktop/WCore/source/include/sound_system.h",
		"/home/ndx/Desktop/WCore/source/include/game_system.h",
		"/home/ndx/Desktop/WCore/source/include/algorithms.h",
		"/home/ndx/Desktop/WCore/source/src/chunk_manager.cpp",
		"/home/ndx/Desktop/WCore/source/src/config.cpp",
		"/home/ndx/Desktop/WCore/source/wtypes.h",
		"/home/ndx/Desktop/WCore/config/dbg_intern_strings.xml",
		"/home/ndx/Desktop/WCore/source/include/logger.h",
		"/home/ndx/Desktop/WCore/source/src/logger.cpp",
		"/home/ndx/Desktop/WCore/source/include/game_clock.h",
		"/home/ndx/Desktop/WCore/source/include/error.h",
		"/home/ndx/Desktop/WCore/source/include/config.h",
		"/home/ndx/Desktop/WCore/hosts/maze/source/include/arguments.h",
		"/home/ndx/Desktop/WCore/source/include/globals.h",
		"/home/ndx/Desktop/WCore/source/src/globals.cpp",
		"/home/ndx/Desktop/WCore/source/src/input_handler.cpp",
		"/home/ndx/Desktop/WCore/source/src/editor.cpp",
		"/home/ndx/Desktop/WCore/hosts/surfaceplot/source/src/main.cpp",
		"/home/ndx/Desktop/WCore/source/src/wcore.cpp",
		"/home/ndx/Desktop/WCore/source/wcore.h",
		"/home/ndx/Desktop/WCore/source/src/entity_factory.cpp",
		"/home/ndx/Desktop/WCore/source/include/entity_factory.h",
		"/home/ndx/Desktop/WCore/source/include/wentity.h",
		"/home/ndx/Desktop/WCore/source/src/scene_loader.cpp",
		"/home/ndx/Desktop/WCore/source/include/mesh_descriptor.h",
		"/home/ndx/Desktop/WCore/source/src/surface_mesh_factory.cpp",
		"/home/ndx/Desktop/WCore/source/src/model_factory.cpp",
		"/home/ndx/Desktop/WCore/source/include/model_factory.h",
		"/home/ndx/Desktop/WCore/source/include/basic_components.h",
		"/home/ndx/Desktop/WCore/source/src/game_object_factory.cpp",
		"/home/ndx/Desktop/WCore/source/include/game_object_factory.h",
		"/home/ndx/Desktop/WCore/source/include/scene_loader.h",
		"/home/ndx/Desktop/WCore/source/include/vertex_array.hpp",
		"/home/ndx/Desktop/WCore/source/include/renderer.hpp",
		"/home/ndx/Desktop/WCore/source/src/SSAO_renderer.cpp",
		"/home/ndx/Desktop/WCore/source/src/scene.cpp",
		"/home/ndx/Desktop/WCore/source/include/scene.h",
		"/home/ndx/Desktop/WCore/hosts/ecs_test/source/src/main.cpp",
		"/home/ndx/Desktop/WCore/hosts/surfaceplot/CMakeLists.txt",
		"/home/ndx/Desktop/WCore/source/include/vertex_format.h",
		"/home/ndx/Desktop/WCore/source/include/buffer_unit.hpp",
		"/home/ndx/Desktop/WCore/source/src/daylight.cpp",
		"/home/ndx/Desktop/WCore/source/src/camera.cpp",
		"/home/ndx/Desktop/WCore/source/include/camera.h",
		"/home/ndx/Desktop/WCore/source/include/cspline.h",
		"/home/ndx/Desktop/WCore/source/src/slerp_interpolator.cpp",
		"/home/ndx/Desktop/WCore/source/include/slerp_interpolator.h",
		"/home/ndx/Desktop/WCore/source/include/bounding_boxes.h",
		"/home/ndx/Desktop/WCore/source/src/camera_controller.cpp",
		"/home/ndx/Desktop/WCore/source/include/camera_controller.h",
		"/home/ndx/Desktop/WCore/source/src/quaternion.cpp",
		"/home/ndx/Desktop/WCore/source/include/quaternion.h",
		"/home/ndx/Desktop/WCore/source/include/listener.h",
		"/home/ndx/Desktop/WCore/source/include/message.h",
		"/home/ndx/Desktop/WCore/source/include/component_detail.h",
		"/home/ndx/Desktop/WCore/source/src/wcomponent.cpp",
		"/home/ndx/Desktop/WCore/source/include/wcomponent.h",
		"/home/ndx/Desktop/WCore/source/src/wentity.cpp",
		"/home/ndx/Desktop/WCore/source/wecs.h",
		"/home/ndx/Desktop/WCore/source/src/frame_buffer.cpp",
		"/home/ndx/Desktop/WCore/source/src/cspline.cpp",
		"/home/ndx/Desktop/WCore/source/include/math_structures.hpp",
		"/home/ndx/Desktop/WCore/source/include/daylight.h",
		"/home/ndx/Desktop/WCore/source/src/material.cpp",
		"/home/ndx/Desktop/WCore/source/src/shader.cpp",
		"/home/ndx/Desktop/WCore/source/src/lighting_renderer.cpp",
		"/home/ndx/Desktop/WCore/source/include/material.h",
		"/home/ndx/Desktop/WCore/source/include/surface_mesh_factory.h",
		"/home/ndx/Desktop/WCore/source/include/material_factory.h",
		"/home/ndx/Desktop/WCore/source/src/mesh_descriptor.cpp",
		"/home/ndx/Desktop/WCore/source/include/lights.h",
		"/home/ndx/Desktop/WCore/source/src/bezier.cpp",
		"/home/ndx/Desktop/WCore/source/include/bezier.h",
		"/home/ndx/Desktop/WCore/source/include/material_common.h",
		"/home/ndx/Desktop/WCore/source/include/terrain_factory.h",
		"/home/ndx/Desktop/WCore/source/src/terrain_factory.cpp",
		"/home/ndx/Desktop/WCore/source/include/terrain_common.h",
		"/home/ndx/Desktop/WCore/source/include/height_map.h",
		"/home/ndx/Desktop/WCore/source/src/height_map.cpp",
		"/home/ndx/Desktop/WCore/source/include/heightmap_generator.h",
		"/home/ndx/Desktop/WCore/source/src/material_common.cpp",
		"/home/ndx/Desktop/WCore/source/include/io_utils.h",
		"/home/ndx/Desktop/WCore/source/include/chunk_manager.h",
		"/home/ndx/Desktop/WCore/hosts/maze/source/src/arguments.cpp",
		"/home/ndx/Desktop/WCore/res/levels/l_mv.xml",
		"/home/ndx/Desktop/WCore/source/include/octree.hpp",
		"/home/ndx/Desktop/WCore/source/include/editor.h",
		"/home/ndx/Desktop/WCore/source/src/debug_renderer.cpp",
		"/home/ndx/Desktop/WCore/source/include/debug_renderer.h",
		"/home/ndx/Desktop/WCore/source/src/bounding_boxes.cpp",
		"/home/ndx/Desktop/WCore/source/include/xml_parser.h",
		"/home/ndx/Desktop/WCore/source/include/xml_utils.hpp",
		"/home/ndx/Desktop/WCore/hosts/nuclear/CMakeLists.txt",
		"/home/ndx/Desktop/WCore/source/src/ray_caster.cpp",
		"/home/ndx/Desktop/WCore/source/include/ray_caster.h",
		"/home/ndx/Desktop/WCore/source/include/engine_core.h",
		"/home/ndx/Desktop/WCore/source/src/game_system.cpp",
		"/home/ndx/Desktop/WCore/source/include/pipeline.h",
		"/home/ndx/Desktop/WCore/source/include/informer.h",
		"/home/ndx/Desktop/WCore/source/src/informer.cpp",
		"/home/ndx/Desktop/WCore/source/src/listener.cpp",
		"/home/ndx/Desktop/WCore/source/include/message_tracker.h",
		"/home/ndx/Desktop/WCore/source/src/message_tracker.cpp",
		"/home/ndx/Desktop/WCore/source/include/transformation.h"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/ndx/Desktop/WCore/source/include,/home/ndx/Desktop/WCore/source/src,/home/ndx/Desktop/WCore/res/shaders",
			"/home/ndx/Desktop/WCore/source/include,/home/ndx/Desktop/WCore/source/src"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"is_instance",
			"retri",
			"Loading obj file",
			"asset",
			"Asset",
			"set_buffer_batch",
			"model_instances_",
			"static_octree",
			"chunk_loaded_once_",
			"HRESOLVE",
			"DET",
			"draw_models",
			"parse_models",
			"populate_static_octree",
			"models_",
			"models_order_",
			"buffer_unit_",
			"set_buffer_batch",
			"New static model",
			"push_back",
			"list",
			"loaded_mesh_model_instances",
			"loaded_mesh_instances",
			"model_factory_",
			"model",
			"Low",
			"ck_node",
			"model na",
			"mesh name",
			"leak",
			"XkbGetMap",
			"SurfaceMesh*",
			"FaceMesh*",
			"SurfaceMesh*",
			"pmesh = new TriangularMesh",
			"pmesh = new FaceMesh",
			"TriangularMesh*",
			"FaceMesh*",
			"TriangularMesh*",
			"FaceMesh*",
			"default",
			"BB",
			"max_distance",
			"load_sound",
			"H_(",
			"Clamp",
			"vol_bgm",
			"vol_fx",
			"vol_master",
			"switch",
			"NULL",
			"system",
			"FMODErrorCheck",
			"Sound",
			"stream",
			"isfx",
			"is_fx",
			"soundfx_node",
			"fx_location",
			"fx_name",
			"SoundFX",
			"mdl_node",
			"fadeout_s",
			"doppler_scale",
			"pimpl_->",
			"pimpl_",
			"impl->",
			"soundbgm_path_",
			"soundfx_path_",
			"desc",
			"it",
			"name",
			"pimpl_",
			"soundfx",
			"key",
			"value_db",
			"volume_db",
			"while",
			"soundfxpath_",
			"soundfx_",
			"soundfx",
			"fmodsys",
			"EngineImpl",
			"it2",
			"hname",
			"channel1",
			"general",
			"print_backtrace",
			"stack",
			"CRIT",
			"DISTANCEFACTOR",
			"float",
			"fatal",
			"result",
			"fs::path",
			"sound1",
			"register_channel",
			"DLOGS",
			"CONFIG.get",
			"config",
			"void",
			"override",
			"virtual",
			"register_",
			"return procedural",
			"TreeProps",
			"get_vertex_count",
			"n_vertices",
			"load_geometry",
			"chunk->load_geometry",
			"if(rebind) ",
			"set_buffer_offset",
			"get_n_elements",
			"ret",
			"CRIT",
			"ent_node",
			"model",
			"instance_descriptors_",
			"model_name",
			"mdl_node",
			"model_fact",
			"model_factory_",
			"make_terrain_patch",
			"model_factory_",
			"heightmap",
			"material",
			"reg",
			"ComponentRegistry"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"std::shared_ptr<SurfaceMesh>",
			"std::shared_ptr<FaceMesh>",
			"std::shared_ptr<SurfaceMesh>",
			"pmesh(new TriangularMesh)",
			"pmesh(new FaceMesh)",
			"std::shared_ptr<TriangularMesh>",
			"std::shared_ptr<FaceMesh>",
			"std::shared_ptr<TriangularMesh>",
			"std::shared_ptr<FaceMesh>",
			"SOUND_BGM_PATH",
			"SOUND_FX_PATH",
			"sounds",
			"soundfx_path_",
			"pimpl_->soundfx",
			"pimpl_->fmodsys",
			"CameraStateTrackingShot",
			"CameraStateFreefly",
			"CameraState",
			"current_state_",
			"camera_states_",
			"pcam",
			"model_factory_->material_factory()",
			"model_factory_->mesh_factory()",
			"pscene_->",
			"static_octree",
			"OCTREE_ARGLIST",
			"OCTREE_NODE_ARGLIST",
			"OCTREE_NODE_TARGS",
			"OCTREE_NODE",
			"DataVisitorT",
			"OctreeNode",
			"ContentT",
			"DataT",
			"UserDataT",
			"PrimitiveT",
			"H_",
			"hash_t",
			"H_",
			"value_[$1]*value_[$1]",
			"GLB.WIN_",
			"position_",
			".position_",
			"if(profile_renderers)\\n{\\n$1}",
			"ii",
			"#include \"wtypes.h\"",
			"CMAKE_SOURCE_DIR",
			"eimpl_",
			"case $1:\\n\\t\\t$2\\n\\t\\tbreak;",
			"case $1:\\n\\t$2\\n\\tbreak;",
			"case $1:\\n$2\\nbreak;",
			"Context&",
			"game_loop",
			"GameLoop",
			"HS_(\"core\")",
			"__PROFILING_GAMELOOP__",
			"__DEBUG__",
			"\"buffer\"",
			"",
			"norm",
			"depth",
			"ao",
			"rough",
			"metal",
			"albedo",
			"TextureUnit",
			"texture_descriptor.locations",
			"texture_descriptor.has_unit",
			"albedo_",
			"### $1",
			"## $1",
			"bounding_box",
			"0.6f",
			"right_far",
			"right_near",
			"up_far",
			"up_near",
			"send_uniform\\(H_(\"$1\")",
			"SCENE",
			"",
			"SCENE",
			"GLB.SCR_H",
			"GLB.SCR_W",
			"GLB.SCR_H",
			"GLB.SCR_W",
			"GLB.SCR_H",
			"GLB.SCR_W",
			"GLB.SCR_H",
			"GLB.SCR_W",
			"SurfaceMesh",
			"MeshP",
			"MeshPU",
			"MeshPNTU",
			"sbuffer_->",
			"DropletErosionProps",
			"extent",
			"VertexHashMap",
			"uint32_t",
			"<Mesh type=\"$1\"></Mesh>",
			"GFX::finish",
			"chunks_.at(c0_ind_)",
			"chunks_.at(0)->",
			"chunks_.at(0)",
			"chunks_[0]",
			"chunk0_.models_blend_",
			"->render",
			"uint32_t",
			"</x>",
			"<x>",
			"<Prop name=\"radius\" value=\"$1\"/>",
			"<Prop name=\"brightness\" value=\"$1\"/>",
			"<Prop name=\"color\" value=\"$1\"/>",
			"<Prop name=\"position\" value=\"$1\"/>",
			"<Prop name=\"$1\" value=\"$2\"/>",
			"<Prop name=\"$1\" value=\"$2\"\\>",
			"<Control value=\"$1\"/>",
			",",
			"{H_(\"$1\"), GLFW_KEY_$1},",
			"{H_($1), GLFW_KEY_$1},",
			"",
			"register_action(",
			"SSAOBuffer",
			"uint32_t",
			"time",
			"tmax",
			"domain",
			"points",
			"Chunk",
			"perm_mod_12_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "hosts/internstr/source/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5761,
						"regions":
						{
						},
						"selection":
						[
							[
								3335,
								3335
							]
						],
						"settings":
						{
							"SL.15.region_keys":
							[
							],
							"SL.56.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1292.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "hosts/nuclear/source/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11076,
						"regions":
						{
						},
						"selection":
						[
							[
								10598,
								10598
							]
						],
						"settings":
						{
							"SL.15.region_keys":
							[
							],
							"SL.16.region_keys":
							[
							],
							"SL.70.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6345.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "hosts/maze/source/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12781,
						"regions":
						{
						},
						"selection":
						[
							[
								10033,
								10033
							]
						],
						"settings":
						{
							"SL.16.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"SL.17.region_keys":
							[
							],
							"SL.51.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 6725.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "source/wcore.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1580,
						"regions":
						{
						},
						"selection":
						[
							[
								1463,
								1463
							]
						],
						"settings":
						{
							"SL.17.region_keys":
							[
							],
							"SL.18.region_keys":
							[
							],
							"SL.67.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "source/src/wcore.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9448,
						"regions":
						{
						},
						"selection":
						[
							[
								2226,
								2226
							]
						],
						"settings":
						{
							"SL.18.region_keys":
							[
							],
							"SL.19.region_keys":
							[
							],
							"SL.68.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1404.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "source/include/scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8675,
						"regions":
						{
						},
						"selection":
						[
							[
								4374,
								4374
							]
						],
						"settings":
						{
							"SL.20.region_keys":
							[
							],
							"SL.71.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1822.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "source/src/scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15867,
						"regions":
						{
						},
						"selection":
						[
							[
								7732,
								7732
							]
						],
						"settings":
						{
							"SL.77.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4226.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "source/include/mesh.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6216,
						"regions":
						{
						},
						"selection":
						[
							[
								1089,
								1089
							]
						],
						"settings":
						{
							"SL.22.region_keys":
							[
								"SL.cppcheck.Gutter.|region.yellowish markup.warning.sublime_linter|dot",
								"sublime_linter.protected_regions",
								"SL.cppcheck.Highlights.|652c02788ce5f5df3ef15d2271743d59f0f8a5acf3ebb9d57127e4efc40ba82c|region.yellowish markup.warning.sublime_linter|32"
							],
							"SL.89.region_keys":
							[
								"sublime_linter.protected_regions",
								"SL.cppcheck.Gutter.|region.yellowish markup.warning.sublime_linter|dot",
								"SL.cppcheck.Highlights.|f5350ece232100cae0b2073c9aada9290f40e7ad5c945decd8a20b25e8e9face|region.yellowish markup.warning.sublime_linter|32"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "source/include/scene_loader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5902,
						"regions":
						{
						},
						"selection":
						[
							[
								1005,
								1005
							]
						],
						"settings":
						{
							"SL.24.region_keys":
							[
							],
							"SL.55.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "source/src/scene_loader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39102,
						"regions":
						{
						},
						"selection":
						[
							[
								27573,
								27573
							]
						],
						"settings":
						{
							"SL.25.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"SL.54.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13608.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "source/include/game_object_factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2102,
						"regions":
						{
						},
						"selection":
						[
							[
								1286,
								1286
							]
						],
						"settings":
						{
							"SL.74.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "source/src/game_object_factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1045,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"SL.93.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "source/include/entity_factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1113,
						"regions":
						{
						},
						"selection":
						[
							[
								833,
								833
							]
						],
						"settings":
						{
							"SL.94.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "source/src/entity_factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3252,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"SL.95.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "source/include/model_factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2006,
						"regions":
						{
						},
						"selection":
						[
							[
								959,
								959
							]
						],
						"settings":
						{
							"SL.26.region_keys":
							[
							],
							"SL.55.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "source/src/model_factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5569,
						"regions":
						{
						},
						"selection":
						[
							[
								4454,
								4454
							]
						],
						"settings":
						{
							"SL.27.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"SL.54.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1760.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "source/include/surface_mesh_factory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2051,
						"regions":
						{
						},
						"selection":
						[
							[
								1608,
								1608
							]
						],
						"settings":
						{
							"SL.57.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "source/src/surface_mesh_factory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8152,
						"regions":
						{
						},
						"selection":
						[
							[
								2456,
								2456
							]
						],
						"settings":
						{
							"SL.56.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1080.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 18,
					"file": "config/keybindings.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4984,
						"regions":
						{
						},
						"selection":
						[
							[
								4651,
								4651
							]
						],
						"settings":
						{
							"SL.24.region_keys":
							[
							],
							"SL.28.region_keys":
							[
							],
							"SL.30.region_keys":
							[
							],
							"SL.43.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "res/levels/l_mv.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5529,
						"regions":
						{
						},
						"selection":
						[
							[
								1122,
								1122
							]
						],
						"settings":
						{
							"SL.29.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "res/levels/l_maze.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6236,
						"regions":
						{
						},
						"selection":
						[
							[
								545,
								545
							]
						],
						"settings":
						{
							"SL.29.region_keys":
							[
							],
							"SL.30.region_keys":
							[
							],
							"SL.55.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "res/levels/l_tree.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16849,
						"regions":
						{
						},
						"selection":
						[
							[
								9643,
								9643
							]
						],
						"settings":
						{
							"SL.26.region_keys":
							[
							],
							"SL.30.region_keys":
							[
							],
							"SL.31.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4860.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "res/levels/l_crystal.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23569,
						"regions":
						{
						},
						"selection":
						[
							[
								22734,
								22734
							]
						],
						"settings":
						{
							"SL.23.region_keys":
							[
							],
							"SL.27.region_keys":
							[
							],
							"SL.31.region_keys":
							[
							],
							"SL.32.region_keys":
							[
							],
							"SL.65.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10746.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "config/config.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3308,
						"regions":
						{
						},
						"selection":
						[
							[
								2393,
								2393
							],
							[
								2440,
								2440
							],
							[
								2487,
								2487
							],
							[
								2534,
								2534
							],
							[
								2581,
								2581
							],
							[
								2628,
								2628
							],
							[
								2675,
								2675
							],
							[
								2722,
								2722
							],
							[
								2769,
								2769
							],
							[
								2816,
								2816
							],
							[
								2863,
								2863
							],
							[
								2910,
								2910
							],
							[
								2957,
								2957
							],
							[
								3004,
								3004
							],
							[
								3051,
								3051
							]
						],
						"settings":
						{
							"SL.26.region_keys":
							[
							],
							"SL.28.region_keys":
							[
							],
							"SL.31.region_keys":
							[
							],
							"SL.32.region_keys":
							[
							],
							"SL.33.region_keys":
							[
							],
							"SL.36.region_keys":
							[
							],
							"SL.37.region_keys":
							[
							],
							"SL.42.region_keys":
							[
							],
							"SL.44.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1080.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "res/levels/assets.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8439,
						"regions":
						{
						},
						"selection":
						[
							[
								8271,
								8271
							]
						],
						"settings":
						{
							"SL.29.region_keys":
							[
							],
							"SL.33.region_keys":
							[
							],
							"SL.34.region_keys":
							[
							],
							"SL.38.region_keys":
							[
							],
							"SL.42.region_keys":
							[
							],
							"SL.48.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4032.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "res/levels/sounds.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 771,
						"regions":
						{
						},
						"selection":
						[
							[
								569,
								569
							]
						],
						"settings":
						{
							"SL.33.region_keys":
							[
							],
							"SL.35.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "res/levels/entity.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								243,
								243
							]
						],
						"settings":
						{
							"SL.36.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "res/shaders/gpass.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2727,
						"regions":
						{
						},
						"selection":
						[
							[
								1374,
								1374
							]
						],
						"settings":
						{
							"SL.37.region_keys":
							[
							],
							"SL.68.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "res/levels/gui_assets.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 233,
						"regions":
						{
						},
						"selection":
						[
							[
								97,
								97
							]
						],
						"settings":
						{
							"SL.30.region_keys":
							[
							],
							"SL.38.region_keys":
							[
							],
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "res/shaders/cursor.vert",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 256,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"SL.31.region_keys":
							[
							],
							"SL.39.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "res/shaders/lpass_exp.vert",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 866,
						"regions":
						{
						},
						"selection":
						[
							[
								528,
								528
							]
						],
						"settings":
						{
							"SL.32.region_keys":
							[
							],
							"SL.40.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "res/shaders/lpass_exp.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6398,
						"regions":
						{
						},
						"selection":
						[
							[
								1981,
								1981
							]
						],
						"settings":
						{
							"SL.33.region_keys":
							[
							],
							"SL.41.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1296.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "source/tests/catch_mat.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14274,
						"regions":
						{
						},
						"selection":
						[
							[
								13641,
								13641
							]
						],
						"settings":
						{
							"SL.132.region_keys":
							[
							],
							"SL.34.region_keys":
							[
							],
							"SL.42.region_keys":
							[
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8332.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "res/shaders/cursor.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 258,
						"regions":
						{
						},
						"selection":
						[
							[
								245,
								245
							]
						],
						"settings":
						{
							"SL.35.region_keys":
							[
							],
							"SL.43.region_keys":
							[
							],
							"SL.73.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "res/shaders/text.vert",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 258,
						"regions":
						{
						},
						"selection":
						[
							[
								151,
								151
							]
						],
						"settings":
						{
							"SL.36.region_keys":
							[
							],
							"SL.44.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "res/shaders/line.vert",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 225,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"SL.37.region_keys":
							[
							],
							"SL.45.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "res/shaders/line.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 227,
						"regions":
						{
						},
						"selection":
						[
							[
								108,
								108
							]
						],
						"settings":
						{
							"SL.38.region_keys":
							[
							],
							"SL.46.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "res/shaders/text.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								110
							]
						],
						"settings":
						{
							"SL.39.region_keys":
							[
							],
							"SL.47.region_keys":
							[
							],
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 38,
					"file": "NOTES.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 392628,
						"regions":
						{
						},
						"selection":
						[
							[
								391309,
								391309
							]
						],
						"settings":
						{
							"SL.24.region_keys":
							[
								"sublime_linter.protected_regions"
							],
							"SL.25.region_keys":
							[
								"SL.cppcheck.Highlights.|945fe709ff1f8cd0fc8fea508e6670b4ca19ef6bbd5163324a1a08547f26cf90|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|7c014e04f7aa9efa51c74c8ffb16d27e6760a9439c647ebc1410b3a399a60a9e|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|1dd16c9d85dd18ac5f988c45603a44dcdf08a696593aefc34f7a7a84b70e7d3e|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|4eca6c0de46456d327754d597eab0f6da763069629373d4679ab957251f0adc5|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|5dbdedc931162c9be6572bcf3807215e2ca8b11dca61e1fb1686d68c1e525071|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|b0e31f99b0c397ba8850a4013dc3adc41d4add835817cecc105975fa50ffd8f5|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|9815acf802fe1893e0bd2aa9ca459a4d33c76c0b74e3747249c6cdcd20dc92c5|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|3cb1a3c4a5ab9ab21d0211ca3285c9e0eceadf9d8ae3b81a9bd6d32667286ddf|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|e1246e8b96c3666f69d4060713cd40632a8fb2c03e27ec0f4a6496fc50765204|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|cdc2a0689b4b56376897cda3dc91cc7f7829894659c1a39b9cf5861d3ca5cceb|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|f33ed4b155f92bde1608eba0a6c21e93345b73172796b4bcc1ef6ee7f7c6dd30|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|0a86aa3fe8c917569a87286fa901c42d0d244af88df73504a607433798ef91ef|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|6aed92f9fa5eaef5ab585802778932e45df55913e8a22d8836089a45e13a858a|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|9863721ae3d0d0e73a7e51bae85a1ab7d7c6692ecd916382ebe231c631748b49|region.redish markup.error.sublime_linter|32",
								"sublime_linter.protected_regions",
								"SL.cppcheck.Highlights.|4bb215094d705942dabd67645ebca266d9e7c134ac69a3d0a5684109783b27cd|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|913aa1bfd79096e2ab3023906071a38c6a5244eadc89e096918a34f1ceb00850|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|a1b46e69849fe200e1ea710c429667902f930854c3016706c2c0d57f14b3881e|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|887f07dfeb1680498440a446f398e9caa170e534ca03deb7b9b09ea2adc708ce|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|3561e2cd997791b8e26f3025ebb1b93ab3cebc29a2181eae5cf79a659d175985|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|e4f45e2e6adeebe463a86667273100ab7553f2eb9a54f6d159aa50177b29c22e|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|8eae181e4175a8a12903598469582d9d78c8fe64d948add5295779351ee42ed4|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|2844ca69d79d746aed3369af14b649f8210a847e27d5e81fd7cfd15ab7f45327|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|bc96c53b35f856d94e4cf79b3159878e1d1a54c816e313d6f04834aa60c8292f|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|1eec7906ab25baca1ce55b3046f815efdc02ac751f7faab42d7b3cd90c4191a4|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|c01ce71c2166e7a1f5f1dfdbc78078a58b096a99241bcb5cdb92e1b7a438e3e1|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Gutter.|region.redish markup.error.sublime_linter|dot"
							],
							"SL.26.region_keys":
							[
							],
							"SL.27.region_keys":
							[
							],
							"SL.28.region_keys":
							[
							],
							"SL.29.region_keys":
							[
							],
							"SL.30.region_keys":
							[
							],
							"SL.31.region_keys":
							[
							],
							"SL.32.region_keys":
							[
							],
							"SL.33.region_keys":
							[
							],
							"SL.34.region_keys":
							[
							],
							"SL.35.region_keys":
							[
							],
							"SL.36.region_keys":
							[
							],
							"SL.37.region_keys":
							[
							],
							"SL.38.region_keys":
							[
							],
							"SL.39.region_keys":
							[
							],
							"SL.40.region_keys":
							[
							],
							"SL.41.region_keys":
							[
							],
							"SL.42.region_keys":
							[
							],
							"SL.43.region_keys":
							[
							],
							"SL.44.region_keys":
							[
							],
							"SL.45.region_keys":
							[
							],
							"SL.46.region_keys":
							[
							],
							"SL.48.region_keys":
							[
							],
							"SL.49.region_keys":
							[
							],
							"SL.50.region_keys":
							[
							],
							"SL.51.region_keys":
							[
							],
							"SL.52.region_keys":
							[
							],
							"SL.53.region_keys":
							[
							],
							"SL.54.region_keys":
							[
							],
							"SL.55.region_keys":
							[
							],
							"SL.57.region_keys":
							[
							],
							"SL.58.region_keys":
							[
							],
							"SL.59.region_keys":
							[
							],
							"SL.60.region_keys":
							[
							],
							"SL.62.region_keys":
							[
								"SL.cppcheck.Gutter.|region.redish markup.error.sublime_linter|dot",
								"sublime_linter.protected_regions",
								"SL.cppcheck.Highlights.|51bc5c765a1e2d1b10f4b05148b904dd325a67c332d06d9d0be566eb3e2d5a09|region.redish markup.error.sublime_linter|32",
								"SL.cppcheck.Highlights.|03b5ad50bd8974d2262c0c060d7a5cfc50e275af3c4b485373f5be01b046831d|region.redish markup.error.sublime_linter|32"
							],
							"SL.64.region_keys":
							[
							],
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"history_list_is_closing": true,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 244477.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "hosts/maze/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1356,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								174
							]
						],
						"settings":
						{
							"SL.49.region_keys":
							[
							],
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 176.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "hosts/sandbox/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1380,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"SL.34.region_keys":
							[
							],
							"SL.42.region_keys":
							[
							],
							"SL.44.region_keys":
							[
							],
							"SL.50.region_keys":
							[
							],
							"SL.53.region_keys":
							[
							],
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 194.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 230,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"SL.43.region_keys":
							[
							],
							"SL.51.region_keys":
							[
							],
							"SL.55.region_keys":
							[
							],
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5107,
						"regions":
						{
						},
						"selection":
						[
							[
								1768,
								1768
							]
						],
						"settings":
						{
							"SL.43.region_keys":
							[
							],
							"SL.44.region_keys":
							[
							],
							"SL.52.region_keys":
							[
							],
							"SL.56.region_keys":
							[
							],
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 475.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "source/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3022,
						"regions":
						{
						},
						"selection":
						[
							[
								2921,
								2921
							]
						],
						"settings":
						{
							"SL.46.region_keys":
							[
							],
							"SL.53.region_keys":
							[
							],
							"SL.63.region_keys":
							[
							],
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 914.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.712398921832,
			1.0
		],
		"rows":
		[
			0.0,
			0.58413926499,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 132.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/C++/C++ Single File.sublime-build",
	"project": "wcore.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 65.0,
		"last_filter": "Renderer",
		"selected_items":
		[
			[
				"Renderer",
				"bind_as_render_target"
			],
			[
				"Shader",
				"Shader"
			],
			[
				"DLOGES",
				"DLOGES"
			],
			[
				"DLOGI",
				"DLOGI"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
